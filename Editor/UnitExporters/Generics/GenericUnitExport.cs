using System;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

namespace UnityGLTF.Interactivity.Export
{
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    public class InputSocketDefineAttribute : Attribute
    {
        public string gltfId;
        public string socketName;
        public int socketIndex;

        public InputSocketDefineAttribute(string gltfId, string socketName)
        {
            this.gltfId = gltfId;
            this.socketName = socketName;
            this.socketIndex = -1;
        }
        
        public InputSocketDefineAttribute(string gltfId, int socketIndex)
        {
            this.gltfId = gltfId;
            this.socketName = null;
            this.socketIndex = socketIndex;
        }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    public class OutputSocketDefineAttribute : Attribute
    {
        public string gltfId;
        public string socketName;
        public int socketIndex;

        public OutputSocketDefineAttribute(string gltfId, string socketName)
        {
            this.gltfId = gltfId;
            this.socketName = socketName;
            this.socketIndex = -1;
        }
        
        public OutputSocketDefineAttribute(string gltfId, int socketIndex)
        {
            this.gltfId = gltfId;
            this.socketName = null;
            this.socketIndex = socketIndex;
        }
    }

    public abstract class GenericInvokeUnitExport : GenericUnitExport
    {
        public GenericInvokeUnitExport(string gltfNodeType, GenericSocketRules socketRules) : base(gltfNodeType, typeof(InvokeMember), socketRules)
        {
        }
    }
    
    public abstract class GenericGetMemberUnitExport : GenericUnitExport
    {
        public GenericGetMemberUnitExport(string gltfNodeType, GenericSocketRules socketRules) : base(gltfNodeType, typeof(GetMember), socketRules)
        {
        }
    }
    
    public class GenericSocketRules
    {
        public Dictionary<string, TypeRestriction> inputSocketRestrictions = new Dictionary<string, TypeRestriction>();
        public Dictionary<string, ExpectedType> outValueSocketsExpectedTypes = new Dictionary<string, ExpectedType>();

        public void AddExpectedType(string value, ExpectedType expectedType)
        {
            outValueSocketsExpectedTypes[value] = expectedType;
        }

        public void AddTypeRestriction(string value, TypeRestriction typeRestriction)
        {
            inputSocketRestrictions[value] = typeRestriction;
        }
    }
    
    public abstract class GenericUnitExport : IUnitExporter
    {
        private Type _unitType;
        public Type unitType
        {
            get => _unitType;
        }
        
        private Dictionary<string, string> portMappingUnitToNode = new Dictionary<string, string>();
        private Dictionary<string, string> portMappingNodeToUnit = new Dictionary<string, string>();

        private Dictionary<string, int> inputPortMappingNodeToUnitInt = new Dictionary<string, int>();
        private Dictionary<int, string> inputPortMappingUnitIntToNode = new Dictionary<int, string>();

        
        private Dictionary<string, int> outputPortMappingNodeToUnitInt = new Dictionary<string, int>();
        private Dictionary<int, string> outputPortMappingUnitIntToNode = new Dictionary<int, string>();

        private static Dictionary<string, GltfInteractivityNodeSchema> AutoGeneratedSchemata =
            new Dictionary<string, GltfInteractivityNodeSchema>();
        
        private Dictionary<string, ExpectedType> outValueSocketsExpectedTypes;
        private Dictionary<string, TypeRestriction> inputSocketRestrictions;
        
        
        private GltfInteractivityNodeSchema schema;
        
        public GltfInteractivityNodeSchema Schema
        {
            get => schema;
        }

        public static bool TryGetAutoGeneratedSchema(string gltfType, out GltfInteractivityNodeSchema schema)
        {
            return AutoGeneratedSchemata.TryGetValue(gltfType, out schema);
        }
        
        public static GltfInteractivityNodeSchema GetAutoGeneratedSchema(string gltfType)
        {
            if (AutoGeneratedSchemata.TryGetValue(gltfType, out var schema))
                return schema;
            return null;
        }
        
        public GenericUnitExport(string gltfNodeType, Type unitType, GenericSocketRules socketRules)
        {
            schema = new GltfInteractivityNodeSchema();
            schema.Type = gltfNodeType;
            outValueSocketsExpectedTypes = socketRules.outValueSocketsExpectedTypes;
            inputSocketRestrictions = socketRules.inputSocketRestrictions;
            _unitType = unitType;
            CreateInputOutputSchema();

            if (!AutoGeneratedSchemata.ContainsKey(schema.Type))
                AutoGeneratedSchemata.Add(schema.Type, schema);
        }

        private void CreateInputOutputSchema()
        {
            var attributes = GetType().GetCustomAttributes(true);
        
            var inputSockets = new List<GltfInteractivityNodeSchema.InputValueSocketDescriptor>();
            var OutputSockets = new List<GltfInteractivityNodeSchema.OutValueSocketDescriptor>();
            var inputFlowSockets = new List<GltfInteractivityNodeSchema.FlowSocketDescriptor>();
            var outputFlowSockets = new List<GltfInteractivityNodeSchema.FlowSocketDescriptor>();

            foreach (var attribute in attributes)
            {
                if (attribute is InputSocketDefineAttribute inputSocketDefineAttribute)
                {
                    TypeRestriction typeRestriction = null;
                    inputSocketRestrictions.TryGetValue(inputSocketDefineAttribute.gltfId, out typeRestriction);
                    
                    inputSockets.Add(new GltfInteractivityNodeSchema.InputValueSocketDescriptor
                    {
                        Id = inputSocketDefineAttribute.gltfId,
                        SupportedTypes = GltfInteractivityTypeMapping.allTypes,
                        typeRestriction = typeRestriction
                    });

                    if (inputSocketDefineAttribute.socketName == null)
                    {
                        inputPortMappingUnitIntToNode[inputSocketDefineAttribute.socketIndex] = inputSocketDefineAttribute.gltfId;
                        inputPortMappingNodeToUnitInt[inputSocketDefineAttribute.gltfId] = inputSocketDefineAttribute.socketIndex;
                        
                    }
                    else
                    {
                        portMappingNodeToUnit[inputSocketDefineAttribute.gltfId] = inputSocketDefineAttribute.socketName;
                        portMappingUnitToNode[inputSocketDefineAttribute.socketName] = inputSocketDefineAttribute.gltfId;
                    }
                }
                
                if (attribute is OutputSocketDefineAttribute outputSocketDefineAttribute)
                {
                    ExpectedType expectedType = null;
                    outValueSocketsExpectedTypes.TryGetValue(outputSocketDefineAttribute.gltfId, out expectedType);

                    OutputSockets.Add(new GltfInteractivityNodeSchema.OutValueSocketDescriptor
                    {
                        Id = outputSocketDefineAttribute.gltfId,
                        SupportedTypes = GltfInteractivityTypeMapping.allTypes,
                        expectedType = expectedType
                    });
                    
                    if (outputSocketDefineAttribute.socketName == null)
                    {
                        outputPortMappingUnitIntToNode[outputSocketDefineAttribute.socketIndex] = outputSocketDefineAttribute.gltfId;
                        outputPortMappingNodeToUnitInt[outputSocketDefineAttribute.gltfId] = outputSocketDefineAttribute.socketIndex;
                        
                    }
                    else
                    {
                        portMappingNodeToUnit[outputSocketDefineAttribute.gltfId] = outputSocketDefineAttribute.socketName;
                        portMappingUnitToNode[outputSocketDefineAttribute.socketName] = outputSocketDefineAttribute.gltfId;
                    }
                }   
                
                // TODO: flow in/out
            }
            
            schema.InputFlowSockets = inputFlowSockets.ToArray();
            schema.OutputFlowSockets = outputFlowSockets.ToArray();
            schema.InputValueSockets = inputSockets.ToArray();
            schema.OutputValueSockets = OutputSockets.ToArray();
        }
        
        public void InitializeInteractivityNodes(UnitExporter unitExporter)
        {
            var node = unitExporter.CreateNode(schema);
            
            foreach (var flow in node.FlowSocketConnectionData)
            {
                // TODO: Map flow sockets
            }

            if (schema.InputFlowSockets.Length == 0 && schema.OutputFlowSockets.Length == 0)
            {
                // Gltf Node has no flow sockets, we need to bypass the flow sockets
                if (unitExporter.unit.controlInputs.Count == 1 && unitExporter.unit.controlOutputs.Count == 1)
                {
                    unitExporter.ByPassFlow(unitExporter.unit.controlInputs[0], unitExporter.unit.controlOutputs[0]);
                }
                else
                if (unitExporter.unit.controlInputs.Count > 1 || unitExporter.unit.controlOutputs.Count > 1)
                {
                    Debug.LogWarning("Gltf Node has no flow sockets, but the unit has more than one control input/output: "+unitExporter.unit.ToString());
                }
            }
            
            foreach (var input in node.ValueSocketConnectionData)
            {
                if (portMappingNodeToUnit.TryGetValue(input.Key, out var unitSocketName))
                {
                    if (unitExporter.unit.valueInputs.TryGetValue(unitSocketName, out var inputSocket))
                    {
                        unitExporter.MapInputPortToSocketName(inputSocket, input.Key, node);
                    }
                }
                else
                {
                    if (inputPortMappingNodeToUnitInt.TryGetValue(input.Key, out var unitSocketIndex))
                    {
                        var valueInput = unitExporter.unit.valueInputs[unitSocketIndex];
                        unitExporter.MapInputPortToSocketName(valueInput, input.Key, node);
                    }
                }
            }

            foreach (var output in node.Schema.OutputValueSockets)
            {
                if (portMappingNodeToUnit.TryGetValue(output.Id, out var unitSocketName))
                {
                    if (unitExporter.unit.valueOutputs.TryGetValue(unitSocketName, out var outputSocket))
                    {
                        unitExporter.MapValueOutportToSocketName(outputSocket, output.Id, node); 
                    }
                }
                else
                {
                    if (outputPortMappingNodeToUnitInt.TryGetValue(output.Id, out var unitSocketIndex))
                    {
                        var valueOutput = unitExporter.unit.valueOutputs[unitSocketIndex];
                        unitExporter.MapValueOutportToSocketName(valueOutput, output.Id, node); 
                    }
                }
            }
        }
    }
}
using System;
using Unity.VisualScripting;
using UnityEditor;
using UnityEngine;

namespace UnityGLTF.Interactivity.Export
{
    public class Vector2DistanceUnitExporter : DistanceUnitExport
    {
        public override Type unitType { get => typeof(Vector2Distance); }
    }

    public class Vector3DistanceUnitExporter : DistanceUnitExport
    {
        public override Type unitType { get => typeof(Vector3Distance); }
    }

    public class Vector4DistanceUnitExporter : DistanceUnitExport
    {
        public override Type unitType { get => typeof(Vector4Distance); }
    }
    
    public class DistanceUnitExport : IUnitExporter
    {
        public virtual Type unitType { get => typeof(InvokeMember); }
        
        [InitializeOnLoadMethod]
        private static void Register()
        { 
            InvokeUnitExport.RegisterInvokeExporter(typeof(Vector2), nameof(Vector2.Distance), new DistanceUnitExport());
            InvokeUnitExport.RegisterInvokeExporter(typeof(Vector3), nameof(Vector3.Distance), new DistanceUnitExport());
            InvokeUnitExport.RegisterInvokeExporter(typeof(Vector4), nameof(Vector4.Distance), new DistanceUnitExport());
            UnitExporterRegistry.RegisterExporter(new Vector2DistanceUnitExporter());
            UnitExporterRegistry.RegisterExporter(new Vector3DistanceUnitExporter());
            UnitExporterRegistry.RegisterExporter(new Vector4DistanceUnitExporter());
        }
        
        public void InitializeInteractivityNodes(UnitExporter unitExporter)
        {
            var subNode = unitExporter.CreateNode( GenericUnitExport.GetAutoGeneratedSchema("math/sub"));
            unitExporter.MapInputPortToSocketName(unitExporter.unit.valueInputs[0], "a", subNode);
            unitExporter.MapInputPortToSocketName(unitExporter.unit.valueInputs[1], "b", subNode);

   
            var lengthNode = unitExporter.CreateNode( GenericUnitExport.GetAutoGeneratedSchema("math/length"));
            unitExporter.MapInputPortToSocketName("value", subNode, "a", lengthNode);
            unitExporter.MapValueOutportToSocketName(unitExporter.unit.valueOutputs[0], "value", lengthNode);
        }
    }
}
using System;
using Unity.VisualScripting;
using UnityEditor;

namespace UnityGLTF.Interactivity.Export
{
    public class IsNegativInfinityUnitExporter : IUnitExporter
    {
        public Type unitType
        {
            get => typeof(InvokeUnitExport);
        }

        [InitializeOnLoadMethod]
        private static void Register()
        {
            InvokeUnitExport.RegisterInvokeExporter(typeof(float), nameof(float.IsNegativeInfinity), new IsNegativInfinityUnitExporter());
        }
        
        public void InitializeInteractivityNodes(UnitExporter unitExporter)
        {
            var unit = unitExporter.unit as InvokeMember;
            if (unit.valueInputs.Count == 0)
                return;
            
            var node = unitExporter.CreateNode(GenericUnitExport.GetAutoGeneratedSchema("math/isinf"));
            node.ValueIn("a").MapToInputPort(unit.valueInputs[0]);

            var sign = unitExporter.CreateNode(GenericUnitExport.GetAutoGeneratedSchema("math/sign"));
            sign.ValueIn("a").MapToInputPort(unit.valueInputs[0]);

            var and = unitExporter.CreateNode(GenericUnitExport.GetAutoGeneratedSchema("math/and"));
            and.ValueIn("a").ConnectToSource(node.ValueOut("value"));
            and.ValueIn("b").ConnectToSource(sign.ValueOut("value"));
            and.ValueOut("value").MapToPort(unit.result);
            
            unitExporter.ByPassFlow(unit.enter, unit.exit);
        }
    }
}